import Foundation
import MyCheckCore




///MyCheckWallet is a singleton that will give you access to all of the MyCheck functionality. It has all the calls needed to manage a user's payment methods.
public class Dine: Networking{
    internal static let refreshPaymentMethodsNotification = "com.mycheck.refreshPaymentMethodsNotification"
    internal static let loggedInNotification = "com.mycheck.loggedInNotification"
    
    
 
    private static var _shared  :Dine? = Dine()
    
    ///This property points to the singleton object. It should be used for calling all the functions in the class.
    public class var shared: Dine
    {
        if let singleton = _shared
        {
            return singleton
        }
        _shared = Dine()
        return _shared!
    }

    
    internal init() {
        super.init()
       
    }
    ///When activated this object polls the MyCheck server in order to fetch order updates. Call The startPolling function and set the delegate in order to receive updates. You should generally use the poller starting when a 4 digit code is created until the order is closed or canceled.
    open var poller = OrderPoller()
    
    internal var network : Networking?
    
    //order related variables
    internal var lastOrder : Order?
    

    
    /// The code generated by the MyCheck server is valid for a limited time, for a specific user in a specific location. The server returns a 4 digit code to the recipient. This code, when entered into the POS enables MyCheck to sync the client with his order on the POS and can start receiving order updates and perform actions on it.
    ///
    ///    - parameter hotelId: The Id of the hotel the venue belongs to. [Optional]
    ///    - parameter restaurantId: The restaurants Id.
    ///    - parameter success: A block that is called if the call complete successfully
    ///    - parameter fail: Called when the function fails for any reason
    
    open func generateCode(hotelId: String? , restaurantId: String ,  success: @escaping ((String) -> Void) , fail: ((NSError) -> Void)? ) {
        
//        network?.generateCode(hotelId: hotelId, restaurantId: restaurantId, success: { code in
//            self.lastOrder = nil //If we had an open order we will want to ditch it at this point.
//            success(code)
//        }, fail: fail)
        
        var params : Parameters = [  "restaurant_id" :  restaurantId]
        
        if let hotelId = hotelId{
            params ["hotelId"] = hotelId
        }
        if let domain = domain {
            let urlStr = domain + "/restaurants/api/v1/generateCode"
            
            return  network.request(urlStr, method: .post, parameters: params , success: { JSON in
                if let code = JSON["code"] as? NSNumber{
                     self.lastOrder = nil
                    success(code.stringValue)
                    
                }else{
                    if let fail = fail{
                        fail(self.badJSONError())
                    }
                }
                
            }, fail: fail)
        }else{
            if let fail = fail{
                fail(self.notConfiguredError())
            }
        }
        return nil
    }

    }
    
    
    /// Returns the updated order details.
    ///
    ///    - parameter order: The last order received. This is used in order to send the stamp (md5) an thus save the server from regenerating the order if nothing has changed.   [Optional]
    ///    - parameter success: A block that is called if the call complete successfully
    ///    - parameter fail: Called when the function fails for any reason
    
    open func getOrder( order: Order? , success: ((Order) -> Void)? , fail: ((NSError) -> Void)? ){
        var orderId : String? = nil
        var stamp : String? = nil
        if let order = order {
            orderId = order.orderId
            stamp = order.stamp
        }
        if let lastOrder = lastOrder{//if not first call
            stamp = lastOrder.stamp
            orderId = lastOrder.orderId
        }
        network?.callGetOrder(orderId: orderId, stamp: stamp, success: { order in
            self.lastOrder = order
            if let success = success {
                success(order)
            }
        }, fail: { error in
            if error.code == ErrorCodes.noOrderUpdate{
                if MyCheck.logDebugData {
                    
                    NotificationCenter.default.post(name:  Notification.Name("MyCheck comunication ouput") , object: "Success callback called")
                }
                if let success = success , let order = order {
                    success(order)
                    
                }
                return
            }
            if let fail = fail {
                fail( error)
            }
        })
    }
    
    /// Make a payment for an order
    ///
    ///   - parameter request: The details of the payment that should be charged
    ///   - parameter paymentToken: The payment method token that should be used in order to charge the user.
    public func makePayment(request: PaymentRequest , paymentToken: String){
        
    }
    
    
    /// Place an order to the POS. The items sent will be reordered and served to the user. This will only succeed if their is an open order.
    ///
    ///    - parameter items: An array of tuples where the first parameter is an Int that represents the amount of 'item' to order and the second parameter is the item to reorder.
    ///    - parameter success: A block that is called if the call complete successfully
    ///    - parameter fail: Called when the function fails for any reason

    open func reorderItems(items: [(amount: Int , item: Item)] , success: (() -> Void)? , fail: ((NSError) -> Void)? ){
        //creating items JSON
        var itemJSONs :[JSON] = []
        for (amount , item) in items{
            guard let json = item.createReorderJSON(amount: amount)else{
                continue
            }
            
            itemJSONs.append(json)
        }
        let jsonData = try! JSONSerialization.data(withJSONObject: itemJSONs, options: JSONSerialization.WritingOptions())
        
        let jsonString = NSString(data: jsonData, encoding: String.Encoding.utf8.rawValue)! as String
        let params : Parameters = ["items": jsonString]
        
        
        if let domain = domain {
            let urlStr = domain + "/restaurants/api/v1/reorder"
            
            return  request(urlStr, method: .post, parameters: params , success: { JSON in
                
                success()
                
                
            }, fail: fail)
        }else{
            if let fail = fail{
                fail(self.notConfiguredError())
            }
        }
        return nil

}


//MARK: - general scope functions

internal func delay(_ delay:Double, closure:@escaping ()->()) {
    let when = DispatchTime.now() + delay
    DispatchQueue.main.asyncAfter(deadline: when, execute: closure)
}

