//
//  DineInWebViewController.swift
//  Pods
//
//  Created by elad schiller on 8/7/17.
//  Copyright (c) 2017 __MyCompanyName__. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import WebKit
import MyCheckWalletUI
import MyCheckCore
import MyCheckDine
protocol DineInWebDisplayLogic: class
{
    func runJSOnWebview(viewModel: DineInWeb.ViewModel)
    
    func displayApplePayViewController(viewModel: DineInWeb.DisplayApplePayViewController.ViewModel)
    
}


internal class DineInWebViewController: UIViewController
{
    
    internal var locale:NSLocale?
    internal var interactor: DineInWebBusinessLogic?
    
    private var router: (NSObjectProtocol & DineInWebRoutingLogic & DineInWebDataPassing)?
    
    //web view related objects
    internal var webView: WKWebView?
    
    internal var nativeCallHandler: NativeCallHandler?
    private var urlString: String? = nil
    private var webConfig: WKWebViewConfiguration {
        get {
            let webCfg = WKWebViewConfiguration()
            let userController = WKUserContentController()
            nativeCallHandler = NativeCallHandler(interactor: interactor!)
            userController.add(nativeCallHandler!, name: "callbackHandler")
            webCfg.userContentController = userController;
            return webCfg;
        }
    }
    
    
    
    // MARK: Object lifecycle
    
    internal init(code:String,
                  locale:NSLocale,
                  urlString: String,
                  delegate:DineInWebViewControllerDelegate)
    {
        self.urlString = urlString
        self.locale = locale
        super.init(nibName: nil, bundle: nil)
        
        setup()
        interactor?.setupInteractor(request: DineInWeb.SetupDinein.Request(code: code , locale:locale, order: nil , delegate: delegate))
        
    }
    
    internal init(order:Order,
                  locale:NSLocale,
                  urlString: String,
                  delegate:DineInWebViewControllerDelegate)
    {
        self.urlString = urlString
        self.locale = locale
        
        super.init(nibName: nil, bundle: nil)
        
        setup()
        interactor?.setupInteractor(request: DineInWeb.SetupDinein.Request(code: order.clientCode , locale:locale, order:order, delegate: delegate))
        
    }
    
    required public init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    deinit {
        print("deinit DineInWebViewController")
    }
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = DineInWebInteractor()
        let presenter = DineInWebPresenter()
        let router = DineInWebRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override public func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override public func viewDidLoad()
    {
        super.viewDidLoad()
        initWebView()
        
        
    }
    
    private func initWebView(){
        // The URL to load
        //        let bundle =  DineInWebViewController.getBundle( Bundle(for: DineInWebViewController.classForCoder()))
        //
        //        let url = bundle.url(forResource: "test", withExtension: "html")
        //        // Initialize our NSURLRequest
        //        let request = URLRequest(url: url!)
        guard let urlString = urlString,
            let locale = self.locale,
            let url: URL = URLFromURLStringAndQueryString(urlString: urlString, query: "locale=\(locale.localeIdentifier)") else{
                return
        }
        let request = URLRequest(url: url)
        webView = WKWebView(frame: self.view.bounds, configuration: webConfig)
        webView?.autoresizingMask = [.flexibleWidth, .flexibleHeight]
        self.view.addSubview(webView!)
        webView!.load(request)
        
    }
    
    internal static func getBundle(_ bundle: Bundle) -> Bundle{
        
        let bundleURL = bundle.url(forResource: "MyCheckDineUIWeb", withExtension: "bundle")
        let finalBundle = Bundle(url: bundleURL!)
        return finalBundle!
    }
    
}

extension DineInWebViewController: DineInWebDisplayLogic{
    func runJSOnWebview(viewModel: DineInWeb.ViewModel) {
        self.webView?.evaluateJavaScript(viewModel.JSToBeInjected, completionHandler: nil)
    }
    


func displayApplePayViewController(viewModel: DineInWeb.DisplayApplePayViewController.ViewModel){
    
    if viewModel.show {
     self.present(viewModel.viewController, animated: true, completion: nil)
    }else{
        viewModel.viewController.dismiss(animated: true, completion: nil)

    }
}
}

fileprivate extension DineInWebViewController{
    func URLFromURLStringAndQueryString(urlString:String, query: String) -> URL?{
        
        var urlComponents = URLComponents(string: urlString)!
        if let originalQuery = urlComponents.query, originalQuery.characters.count > 0 {
            urlComponents.query = originalQuery + "&\(query)"
        }else{
            urlComponents.query = query
            
        }
        
        
        let url = urlComponents.url
        return url
        
    }
    
}
