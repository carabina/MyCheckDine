//
//  DineInWebPresenter.swift
//  Pods
//
//  Created by elad schiller on 8/7/17.
//  Copyright (c) 2017 __MyCompanyName__. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import MyCheckCore
import MyCheckDine
protocol DineInWebPresentationLogic
{
    func presentTableCode(response: DineInWeb.GetCode.Response)
    
    func orderUpdated(response: DineInWeb.Poll.Response)
    
    func gotOrder(response: DineInWeb.GetOrderDetails.Response)
    
    func reorderedItems(response: DineInWeb.Reorder.Response)
    
    func gotPaymentMethods(response: DineInWeb.PaymentMethods.Response)
    
    func generatedPaymentRequest(response: DineInWeb.GeneratePayRequest.Response)
    
    func madePayment(response: DineInWeb.Pay.Response)
    
    func presentFailError(response: DineInWeb.FailResponse)
    
    func complete(response: DineInWeb.Complete.Response)
    
    func gotFriendList(response: DineInWeb.GetFriendsList.Response)
    
    func addedFriend(response: DineInWeb.AddAFriend.Response)
    
    func sentFeedback(response: DineInWeb.SendFeedback.Response)
    
    func calledWaiter(response: DineInWeb.CallWaiter.Response)
    
    func gotLocale(response: DineInWeb.getLocale.Response)
    
    func gotBenefits(response: DineInWeb.getBenefits.Response)
    
    func redeemedBenefits(response: DineInWeb.RedeemBenefit.Response)
   
    func displayApplePayViewController(response: DineInWeb.DisplayApplePayViewController.Response)

}

class DineInWebPresenter: DineInWebPresentationLogic
{

    
    
    weak var viewController: DineInWebDisplayLogic?
    
    deinit {
        print("deinit DineInWebPresenter")
    }
    
    func presentFailError(response: DineInWeb.FailResponse) {
        let JS = failCall(callback: response.callback, error: response.error)
        viewController?.runJSOnWebview(viewModel: DineInWeb.ViewModel(JSToBeInjected: JS))
    }
    
    func presentTableCode(response: DineInWeb.GetCode.Response){
        let JS = successCall(callback: response.callback, body: ["code": response.code])
        viewController?.runJSOnWebview(viewModel: DineInWeb.ViewModel(JSToBeInjected: JS))
    }
    
    func gotOrder(response: DineInWeb.GetOrderDetails.Response) {
        guard let order = response.order else{
            let JS = failCall(callback: response.callback, error: ErrorCodes.noOpenTable.getError())
            viewController?.runJSOnWebview(viewModel: DineInWeb.ViewModel(JSToBeInjected: JS))
            
            return
        }
        let JS = successCall(callback: response.callback, body: OrderJSONGenerator.createJSONRepresentaion(order: order))
        
        viewController?.runJSOnWebview(viewModel: DineInWeb.ViewModel(JSToBeInjected: JS))
        
    }
    
    func reorderedItems(response: DineInWeb.Reorder.Response) {
        let JS = successCall(callback: response.callback, body: nil)
        
        viewController?.runJSOnWebview(viewModel: DineInWeb.ViewModel(JSToBeInjected: JS))
        
    }
    
    
    func orderUpdated(response: DineInWeb.Poll.Response) {
        
        switch response{
        case .success(let order, let callback):
            
            
            
            let JS = successCall(callback: callback, body: OrderJSONGenerator.createJSONRepresentaion(order: order))
            
            viewController?.runJSOnWebview(viewModel: DineInWeb.ViewModel(JSToBeInjected: JS))
            
        case .fail(let error, let callback):
            let JS = failCall(callback: callback, error: error)
            viewController?.runJSOnWebview(viewModel: DineInWeb.ViewModel(JSToBeInjected: JS))
            
        }
        
    }
    
    func gotPaymentMethods(response: DineInWeb.PaymentMethods.Response) {
        
        let JSONArray = response.methods.map{ $0.generateJSON()}
        let JS = successCall(callback: response.callback, body: ["PaymentMethods":JSONArray])
        
        viewController?.runJSOnWebview(viewModel: DineInWeb.ViewModel(JSToBeInjected: JS))
    }
    
    func generatedPaymentRequest(response: DineInWeb.GeneratePayRequest.Response){
        let JS = successCall(callback: response.callback, body: [
            "priceBeforeTax": response.totalBeforeTax,
            "totalTax": response.totalTax,
            "priceAfterTax":response.totalAfterTax,
            "isExceedingTableTotalAmount": response.isExceedingTableTotalAmount,
            "taxList": response.taxList.map({$0.jsonify()})])
        
        viewController?.runJSOnWebview(viewModel: DineInWeb.ViewModel(JSToBeInjected: JS))
        
    }
    func madePayment(response: DineInWeb.Pay.Response){
        
        let JS = successCall(callback: response.callback, body: ["orderBalance": response.response.newBalance,
                                                                 "fullyPaid":response.response.fullyPaid])
        
        viewController?.runJSOnWebview(viewModel: DineInWeb.ViewModel(JSToBeInjected: JS))
    }
    
    
    func complete(response: DineInWeb.Complete.Response) {
        
        response.delegate.dineInWebViewControllerComplete(controller: viewController as! DineInWebViewController, order: response.order, reason: response.reason)
        
    }
    
    
    func gotFriendList(response: DineInWeb.GetFriendsList.Response) {
        
        let JSONArray = response.friends.map{ $0.generateJSON()}
        let JS = successCall(callback: response.callback, body: ["users" :JSONArray])
        
        viewController?.runJSOnWebview(viewModel: DineInWeb.ViewModel(JSToBeInjected: JS))
    }
    
    func addedFriend(response: DineInWeb.AddAFriend.Response) {
        let JS = successCall(callback: response.callback, body: nil)
        
        viewController?.runJSOnWebview(viewModel: DineInWeb.ViewModel(JSToBeInjected: JS))
    }
    
    func sentFeedback(response: DineInWeb.SendFeedback.Response) {
        let JS = successCall(callback: response.callback, body: nil)
        
        viewController?.runJSOnWebview(viewModel: DineInWeb.ViewModel(JSToBeInjected: JS))  }
    
    func calledWaiter(response: DineInWeb.CallWaiter.Response) {
        let JS = successCall(callback: response.callback, body: nil)
        
        viewController?.runJSOnWebview(viewModel: DineInWeb.ViewModel(JSToBeInjected: JS))
    }
    
    func gotLocale(response: DineInWeb.getLocale.Response){
        let JS = successCall(callback: response.callback, body:[ "locale" :response.locale.localeIdentifier])
        
        viewController?.runJSOnWebview(viewModel: DineInWeb.ViewModel(JSToBeInjected: JS))
        
    }
    
    func gotBenefits(response: DineInWeb.getBenefits.Response) {
        let JS = successCall(callback: response.callback, body:[ "benefits" :response.benefits.map({$0.JSONify()})])
            
            viewController?.runJSOnWebview(viewModel: DineInWeb.ViewModel(JSToBeInjected: JS))
    }
    
    func redeemedBenefits(response: DineInWeb.RedeemBenefit.Response) {
        let JS = successCall(callback: response.callback, body:nil)
        
        viewController?.runJSOnWebview(viewModel: DineInWeb.ViewModel(JSToBeInjected: JS))
    }
    
    func displayApplePayViewController(response: DineInWeb.DisplayApplePayViewController.Response) {
        viewController?.displayApplePayViewController(viewModel: DineInWeb.DisplayApplePayViewController.ViewModel(viewController: response.viewController, show: response.show))
    }
    
    
}

fileprivate extension DineInWebPresenter{
   
    func successCall(callback: String , body: [String: Any]?) -> String{
        
        var returnDictionary: [String: Any] = ["errorCode": 0]
        if let body = body{
            returnDictionary["body"] = body
        }else{
            let emptyDic :[String:Any] = [:]
            returnDictionary["body"] = emptyDic
            
        }
        let stringifiedJSON = returnDictionary.stringify() ??
            failCall(callback: callback, error: ErrorCodes.SDKInternalError.getError())
        return "\(callback)(\(stringifiedJSON))"
        
        
    }
    func failCall(callback: String , error: NSError) -> String{
        
        let returnDictionary: [String: Any] = ["errorCode": error.code,
                                               "errorMessage": error.localizedDescription]
        return "\(callback)(\(returnDictionary.stringify()!))"
    }
    
    
}

fileprivate extension DiningFriend {
    
    func generateJSON() -> [String : Any] {
        
        let JSON: [String: Any] = ["id": ID,
                                   "firstName": firstName,
                                   "lastName": lastName,
                                   "email": email,
                                   "clientCode": clientCode]
        
        
        return JSON
    }
}

